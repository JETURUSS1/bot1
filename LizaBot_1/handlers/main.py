import random
import math

from aiogram import types, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from bot_create import bot

import sqlite3 as sq



async def reply_to_chat(message: types.Message):     #–°–æ–æ–±—â–µ–Ω–∏—è

    if message.chat.type == "private":
        if message.from_user.id == 380923417:
                await bot.send_message(chat_id=-1001950917215, text=message.text)
            #elif message.from_user == message.sticker:
                #await bot.send_sticker(chat_id=-1001950917215,
                                       #sticker=r(str(message.sticker.id)))

        else:
            await bot.send_message(message.from_user.id, text='–ü—Ä–∏–≤–µ—Ç–∏–∫. –ú–µ–Ω—è –∑–æ–≤—É—Ç –õ–∏–∑–∞. –Ø –ø—Ä–æ—Ç–∏–≤ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –æ–±—â–∞—é—Å—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –º–µ–Ω—è –ª–∞–ø–∫–∏, –∞ —É —Ç–µ–±—è –±–∞–Ω')

    else:
        if message.chat.type != "private":
            mo = str(message.text)
            if message.chat.id == -1001950917215:
                bot_words = ['–≠—Ö, –º–µ–Ω—è –±—ã —Å–µ–π—á–∞—Å...', '–ü—Ä–æ–µ—Ö–∞–ª–∏...', '–î–∞ –ø—Ä–æ–µ—Ö–∞–ª–∏ –≥–æ–≤–æ—Ä—é.', "–ë–ê–ù", "–±–∞–∞–∞–∞–Ω", "–ø–æ –ª–±—É", "–ë–ê–ê–ê–ù", "–±–∞–Ω", "–ë–∞–Ω —Ç–µ–±–µ", '–£–ø–∞–∫—É–π—Ç–µ –º–Ω–µ –Å–∂–∏–∫–∞!', '–í—ã –º–µ–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ...', '–û–π, –≤—Å—ë!', '–§–∏–ª–∏ —Ç—ã —Ç—É—Ç –∫–æ–º–∞–Ω–¥—É–µ—à—å?!', "–û—Ç—Å—Ç–∞–Ω—å!!!", "–î–∞–π—Ç–µ –º–Ω–µ –¥—Ä—É–≥–æ–π –ø—Ä–µ—Ñ–∏–∫—Å. –ú–Ω–µ —ç—Ç–æ—Ç –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", "–ï—â–µ —Ä–∞–∑ —Ç–∞–∫ —Å–¥–µ–ª–∞–µ—à—å - —è –≤—ã–π–¥—É", "–ê –∫–∞–∫ –ø–∏—à–µ—Ç—Å—è \"—Ä–∞–∑–≤–æ–¥\"?", "–¢–∞–∫ —É—Å—Ç–∞–ª–∞ –≤–∞—à–∞ –õ–∏–∑–∞", "–ù—É —á—Ç–æ –õ–∏–∑–∞? –ß–¢–æ –õ–ò–ó–ê-–¢–û? –ò–î–ò –ù–ê–•–£–ô", "–û—á–µ–Ω—å —Å–º–µ—à–Ω–æ, –¥–∞. –û–±–æ—Å—Ä–∞—Ç—å—Å—è –∫–∞–∫ —Å–º–µ—à–Ω–æ."]

                if message.text == "–õ–∏–∑–∞" or message.text == "–ª–∏–∑–∞":
                    await message.reply(text=(random.choice(bot_words)))
                    stickers = [(r'CAACAgIAAxkBAAEJPCJkf6kdpKacWf6GYzcK80P0t-O-FAACGCgAAntbeUtYtZWwsH2roy8E'), (r'CAACAgIAAxkBAAEJPo1kgKnIl2AmwaVdc0Y8skXW_dV8ygACMxQAAtWzKEhzcG8yt63ebi8E'), (r'CAACAgQAAxkBAAEJPCpkf6xXo6sbnqqGUeRmuD1ZTsiSRAACHgwAAoLDQVJx3FKPGw9MGi8E'), (r'CAACAgIAAxkBAAEJPCRkf6kjUoghnbnwMeNM_bEr-ShBywACNCcAAnA2eEt55QFa_BdJ7S8E'), (r'CAACAgIAAxkBAAEJPCZkf6ktHkSjk3TnPf_q-eoVwSpVsQACyCoAAmFbeEtSjoc-IQeRqi8E')]
                    await bot.send_sticker(chat_id=-1001950917215,
                                           sticker=random.choice(stickers))
                #  –í –∫–∞—á–µ—Ç—Å–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ sticker –ø–µ—Ä–µ–¥–∞–µ–º id —Å—Ç–∏–∫–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞–Ω–Ω–µ–µ
                #  –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º r  –ø–µ—Ä–µ–¥ —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—Å–µ —Ä–∞–±–æ—Ç–∞–ª–æ (–ó–∞—á–µ–º –∏ –ø–æ—á–µ–º—É –º–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–∞–π–¥–µ)

                elif "–∫–æ—Ä–µ–Ω—å –∏–∑" in mo.lower():
                    number = mo.lower()
                    number = number.replace('–∫–æ—Ä–µ–Ω—å –∏–∑ ', '')
                    result = math.sqrt(int(number))
                    textmap = '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ —á–∏—Å–ª–∞ ' + str(number) + ' —Ä–∞–≤–µ–Ω ' + str(round(result, 2))
                    await message.reply(text=textmap)
                elif "–∫–æ—Ä–µ–Ω—å" in mo.lower():
                    number = mo.lower()
                    number = number.replace('–∫–æ—Ä–µ–Ω—å ', '')
                    result = math.sqrt(int(number))
                    textmap = '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ —á–∏—Å–ª–∞ ' + str(number) + ' —Ä–∞–≤–µ–Ω ' + str(round(result, 2))
                    await message.reply(text=textmap)
                elif '–ª–∏–∑–∞ –∫—Ç–æ' in mo.lower():
                    lyrics = mo.lower()
                    lyrics = lyrics.replace('–ª–∏–∑–∞ –∫—Ç–æ ', '')
                    user_for_who = lyrics
                    quarrel = ['–∫–∞–∫–∞—à–∫–∞', '—Å–Ω–µ–∂–∏–Ω–∫–∞', '–¥–∏–Ω–∞–º–æ', '–±–∞–±—É–ª—å–∫–∞', '–∫–æ—Ç–∏–∫', '–æ—Å–ª–∏–∫',
                           '–±—É–∫–∞—à–∫–∞', "–∫—Ä–∞–∫–æ–∑—è–±—Ä–∞", "–∞—Ä–∞–Ω–≥—É—Ç–∞–Ω", "—Ä–µ–ø—Ç–∏–ª–∏—è", "–º—É—Ö–æ–º–æ—Ä",
                           "—Å–≤–∞–¥–µ–±–Ω—ã–π —Ç–æ—Ä—Ç", "—Ö–µ–π—Ç–µ—Ä –∏—Ä–∏—Å–∞", "–ª—é–±–∏—Ç–µ–ª—å –∏—Ä–∏—Å–∞", "—Ñ–µ–∫–∞–ª–∏—è",
                           "—à–∞–ª–æ–≤–ª–∏–≤–∞—è –æ—Å–æ–±–∞", "–≥–µ—Ä–º–æ—Ñ—Ä–æ–¥–∏—Ç", "—Å–∞–∫—É—Ä–∞", "–¥–∞–≤–∞–ª–∫–∞"]
                    suppose = "–Ø –¥—É–º–∞—é, —á—Ç–æ " + user_for_who + " –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ " + random.choice(quarrel)
                    await message.reply(text=suppose)
                elif '–ª–∏–∑–∞ –∫—Ç–æ' in mo.lower():
                    lyrics = mo.lower()
                    lyrics = lyrics.replace('–ª–∏–∑–∞, –∫—Ç–æ ', '')
                    user_for_who = str(lyrics)
                    quarrel = ['–∫–∞–∫–∞—à–∫–∞', '—Å–Ω–µ–∂–∏–Ω–∫–∞', '–¥–∏–Ω–∞–º–æ', '–±–∞–±—É–ª—å–∫–∞', '–∫–æ—Ç–∏–∫', '–æ—Å–ª–∏–∫',
                           '–±—É–∫–∞—à–∫–∞', "–∫—Ä–∞–∫–æ–∑—è–±—Ä–∞", "–∞—Ä–∞–Ω–≥—É—Ç–∞–Ω", "—Ä–µ–ø—Ç–∏–ª–∏—è", "–º—É—Ö–æ–º–æ—Ä",
                           "—Å–≤–∞–¥–µ–±–Ω—ã–π —Ç–æ—Ä—Ç", "—Ö–µ–π—Ç–µ—Ä –∏—Ä–∏—Å–∞", "–ª—é–±–∏—Ç–µ–ª—å –∏—Ä–∏—Å–∞", "—Ñ–µ–∫–∞–ª–∏—è",
                           "—à–∞–ª–æ–≤–ª–∏–≤–∞—è –æ—Å–æ–±–∞", "–≥–µ—Ä–º–æ—Ñ—Ä–æ–¥–∏—Ç", "—Å–∞–∫—É—Ä–∞", "–¥–∞–≤–∞–ª–∫–∞"]
                    suppose = "–Ø –¥—É–º–∞—é, —á—Ç–æ " + user_for_who.capitalize() + " –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ " + random.choice(quarrel)
                    await message.reply(text=suppose)
                elif '–ª–∏–∑–∞ –±—Ä–∞–∫–∏' in mo.lower():
                    lyrics1 = mo.lower()
                    lyrics1 = lyrics1.replace('–ª–∏–∑–∞ –±—Ä–∞–∫–∏ ', '')
                    user_for_br = lyrics1
                    quarrel_braki = ['–•—É—è–∫–∏', '–° —Ç–∞–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–¥–∏ –∫ –∏—Ä–∏—Å—É', '–ë–∞–Ω —Ç–µ–±–µ', '–ë—å—è–∫–∏, –±—å—è–∫–∏, –∑–∞–π–º–∏—Å—å –¥–µ–ª–æ–º, –¥–æ–ª–±–æ—ë–±', '–•–£–Ø–ö–ò–ò–ò–ò', '–ë—Ä–∞–∫ - —ç—Ç–æ —Ç–≤–æ—è –∂–∏–∑–Ω—å',
                           '–õ—É—á—à–µ –±—ã —Ç—Ä–∞—Ö–Ω—É–ª–∏, —á–µ–º —ç—Ç–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –µ—Ä—É–Ω–¥–æ–π –∑–∞–Ω–∏–º–∞–ª–∏—Å—å', "–§—É!", "–ò–†–ò–°–£ –ú–û–ó–ì–ò –ï–ë–ò!", "–ì–û–°–ü–û–î–ò –ú–ù–ï –†–ê–ó–í–û–î –î–ê–î–£–¢ –í –≠–¢–û–ô –ñ–ò–ó–ù–ò –ò–õ–ò –ù–ï–¢?!", "–ù—É –¥–∞–≤–∞–π, –¥–∞–≤–∞–π. –ü–æ—É–≥–æ—Ä–∞–π. –¢–∞–∫ —Å–º–µ—à–Ω–æ –Ω–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤–µ–¥—å.",
                           "–ì–æ—Å–ø–æ–¥–∏ —Ç—ã –±–æ–∂–µ –º–æ–π, –Ω—É —á—Ç–æ –∑–∞ –∫—Ä–µ—Ç–∏–Ω—ã", "–Ø –ø—Ä–æ—Å—Ç–æ –±–∞–ª–¥–µ—é –æ—Ç –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: —á—Ç–æ –Ω–∏ –¥–µ–Ω—å, —Ç–æ —Å–ø–∞–º—è—Ç —Ç—É–ø—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏", "–ó–ê–°–£–ù–¨ –°–í–û–ò –ë–†–ê–ö–ò –°–ï–ë–ï –í –ñ–û–ü–£ –¢–£–ü–û–ô –ì–û–ù–î–û–ù", "–ì–û–í–ù–Ø–ö–ò –ë–õ–Ø–Ø–Ø–Ø",
                           "–ì–æ—Å–ø–æ–¥–∏, —Ç—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—à—å —Å–µ–≥–æ–¥–Ω—è?", "–ë—Ä–∞–∫–∏ –¥–ª—è –Ω–∏—â–∏—Ö", "–î–∞–π—Ç–µ —É–∂–µ –≤–µ–Ω–µ—Ü –±–µ–∑–±—Ä–∞—á–∏—è", "–Ø –≤ –±—Ä–∞–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –∏–≥—Ä–∞—é"]
                    suppose = random.choice(quarrel_braki)
                    await message.reply(text=suppose)


                elif '+—Ä–ø' in mo:
                    meo = mo.lower()
                    meo = meo.replace('+—Ä–ø ', '')
                    meo = str(meo)
                    list_1 = meo.split(",")
                    try:
                        sqlite_connection = sq.connect('bot.db')
                        cursor = sqlite_connection.cursor()
                        print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")
                        cursor.execute("""CREATE TABLE IF NOT EXISTS users (
                                name TEXT,
                                sex TEXT,
                                old TEXT
                                )""")
                        range1 = (list_1[0], list_1[1], list_1[2])
                        print(range1)
                        print(list_1)
                        sqlite_insert_query = """INSERT INTO users
                                              VALUES
                                              (range1);"""
                        count = cursor.execute(sqlite_insert_query)
                        sqlite_connection.commit()
                        print("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É ", cursor.rowcount)
                        cursor.close()

                    except sq.Error as error:
                        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
                    finally:
                        if sqlite_connection:
                            sqlite_connection.close()
                            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")


                    await bot.send_message(chat_id=-1001950917215, text='–ø—Ä–æ–≤–µ—Ä—å —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—É—é –¥–µ–±–∞–≥-–∫–æ–Ω—Å–æ–ª—å, –ñ–µ–Ω—è')
                    return [list_1]

            elif message.text == "—Ñ–µ—Ä–º–∞" or message.text == "–§–µ—Ä–º–∞":
                    await message.reply(text="–•—É–µ—Ä–º–∞! üòÅ")


    try:
        sqlite_connection = sq.connect('bot.db')
        cursor = sqlite_connection.cursor()
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")
        cursor.execute("""CREATE TABLE IF NOT EXISTS users (
                name TEXT,
                sex TEXT,
                old TEXT
                )""")
        range1 = (list_1[0], list_1[1], list_1[2])
        print(range1)
        print(list_1)
        sqlite_insert_query = """INSERT INTO users
                              VALUES
                              (range1);"""
        count = cursor.execute(sqlite_insert_query)
        sqlite_connection.commit()
        print("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É ", cursor.rowcount)
        cursor.close()

    except sq.Error as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
    finally:
        if sqlite_connection:
            sqlite_connection.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")




#async def reply_voice_to_chat(message: types.Messa):



              # –ì–æ—Ä—è—á–∏–µ —Å–ª–æ–≤–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ–¥–µ–ª–∞–Ω—ã ! –ù–ê–î–î–ê –£–ó–ù–ê–¢–¨ –ë–õ***–ö–ò–ô –®–ò–§–† –î–ò–ù–ì–û


'''async def my_chat_m(message: types.ChatMemberUpdated):
    old = message.old_chat_member
    new = message.new_chat_member
    if new.status == "member":
        await bot.send_message(chat_id=380923417, text="–ì–∞–π –Æ–ª–∏–π –¶–µ–∑–∞—Ä—å –ø—Ä–∏–±—ã–ª —Å—é–¥–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ï–≤–≥–µ–Ω–∏—è –†–æ–º–∞–Ω–æ–≤–∞ (–∫–æ—Ç–æ—Ä—ã–π JETURUSS). –£–≤–∞–∂–∞–π—Ç–µ –µ–≥–æ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –º–µ–Ω—è! –ê–≤–µ, –¶–µ–∑–∞—Ä—å! –ê–≤–µ –º–Ω–µ!") # Welcome message, if bot was added to group
        await bot.leave_chat(message.chat.id)'''     #–í—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã, –Ω—É–∂–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä



def register_main_handlers(dp: Dispatcher):
    dp.register_message_handler(reply_to_chat)
